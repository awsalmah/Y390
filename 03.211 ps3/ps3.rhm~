#lang rhombus
import: "../ship.rhm" open
        "../shup.rhm" open
// add unit tests
println("1. Drawing the rocket")

// Exercise 1:
def scenery = empty_scene(800,300)

def sprite = star(40,"solid","gold")

// Exercise 2:
fun draw_sprite(x_pos,alt):
  place_image(sprite, x_pos, scenery.height-alt, scenery)

draw_sprite(0,0) 
println("")
draw_sprite(700,200)
println("")
println("")

println("2. Computing the trajectory")

// Exercise 3:
def init_speed = 1.5
def init_angle = 0.3 * math.pi // 54 degrees

// Exercise 4:
def init_x_vel = init_speed * math.cos(init_angle)
def init_y_vel = init_speed * math.sin(init_angle)

// Exercise 5:
fun y_pos(t):
  def altitude = (init_y_vel * t) - (0.5 * 0.003 * t * t)
  altitude

y_pos(0)

// Exercise 6:

fun x_pos(t):
  def horizontal_position = init_x_vel * t
  horizontal_position

x_pos(0)
println("")
println("")

println("3. Putting it together")

// Exercise 7.
fun launch(t):
  place_image(sprite, x_pos(t), scenery.height-y_pos(t), scenery)

launch(0)
launch(200)
launch(400)
launch(600)
launch(800)

// animate(launch)

// Challenge:
fun init_x_vel_fn(angle):
  init_speed * math.cos(angle)

fun init_y_vel_fn(angle):
  init_speed * math.sin(angle)

fun nx_pos(t, angle):
  init_x_vel_fn(angle) * t

fun ny_pos(t, angle):
  (init_y_vel_fn(angle) * t) - (0.5 * 0.003 * t * t)
  
def newsprite = circle(5,"solid","red")

fun overlay_sprite(t,angle,newsprite):
  place_image(newsprite, nx_pos(t,angle), (300 - ny_pos(t,angle)), scenery)


fun draw_trail(angle):
  place_images([newsprite,newsprite,newsprite,newsprite,newsprite,newsprite,
                newsprite,newsprite,newsprite,newsprite,newsprite,newsprite,
                newsprite,newsprite,newsprite,newsprite,newsprite,newsprite,
                newsprite,newsprite,newsprite,newsprite,newsprite,newsprite]
               ,[posn(nx_pos(0,0.07 * angle),300 - ny_pos(0,0.07 * angle)),
                 posn(nx_pos(30,0.07 * angle),300 - ny_pos(30,0.07 * angle)),
                 posn(nx_pos(60,0.07 * angle),300 - ny_pos(60,0.07 * angle)),
                 posn(nx_pos(90,0.07 * angle),300 - ny_pos(90,0.07 * angle)),
                 posn(nx_pos(120,0.07 * angle),300 - ny_pos(120,0.07 * angle)),
                 posn(nx_pos(150,0.07 * angle),300 - ny_pos(150,0.07 * angle)),
                 posn(nx_pos(180,0.07 * angle),300 - ny_pos(180,0.07 * angle)),
                 posn(nx_pos(210,0.07 * angle),300 - ny_pos(210,0.07 * angle)),
                 posn(nx_pos(240,0.07 * angle),300 - ny_pos(240,0.07 * angle)),
                 posn(nx_pos(270,0.07 * angle),300 - ny_pos(270,0.07 * angle)),
                 posn(nx_pos(300,0.07 * angle),300 - ny_pos(300,0.07 * angle)),
                 posn(nx_pos(330,0.07 * angle),300 - ny_pos(330,0.07 * angle)),
                 posn(nx_pos(360,0.07 * angle),300 - ny_pos(360,0.07 * angle)),
                 posn(nx_pos(390,0.07 * angle),300 - ny_pos(390,0.07 * angle)),
                 posn(nx_pos(420,0.07 * angle),300 - ny_pos(420,0.07 * angle)),
                 posn(nx_pos(450,0.07 * angle),300 - ny_pos(450,0.07 * angle)),
                 posn(nx_pos(480,0.07 * angle),300 - ny_pos(480,0.07 * angle)),
                 posn(nx_pos(510,0.07 * angle),300 - ny_pos(510,0.07 * angle)),
                 posn(nx_pos(540,0.07 * angle),300 - ny_pos(540,0.07 * angle)),
                 posn(nx_pos(570,0.07 * angle),300 - ny_pos(570,0.07 * angle)),
                 posn(nx_pos(600,0.07 * angle),300 - ny_pos(600,0.07 * angle)),
                 posn(nx_pos(630,0.07 * angle),300 - ny_pos(630,0.07 * angle)),
                 posn(nx_pos(660,0.07 * angle),300 - ny_pos(660,0.07 * angle)),
                 posn(nx_pos(690,0.07 * angle),300 - ny_pos(690,0.07 * angle)),
                 posn(nx_pos(720,0.07 * angle),300 - ny_pos(720,0.07 * angle))],
               overlay_sprite(0,0.07*angle,newsprite))

// animate(draw_trail)