#lang rhombus/and_meta

import lib("2htdp/universe.rkt"):
  expose #{big-bang} as _big_bang
  expose #{on-tick} as _on_tick
  expose #{to-draw} as _to_draw
import pict as image // import pict as p
import lib("pict/main.rkt") as pict:
  expose #{pict->bitmap} as to_bitmap
import lib("2htdp/image.rkt") as img2:
  expose #{rotate} as rotatee

import lib("pict/convert.rkt"):
  expose #{pict-convert} as pict_convert

import: "../shp.rhm" open

println("1. Drawing the rocket")

// Exercise 1:
def scenery = empty_scene(800,300)

def sprite = star(40,"solid","gold")

// Exercise 2:
fun draw_sprite(x_pos,alt):
  place_image(sprite, x_pos, scenery.height-alt, scenery)

draw_sprite(0,0) 
println("")
draw_sprite(700,200)
println("")
println("")

println("2. Computing the trajectory")

// Exercise 3:
def init_speed = 1.5
def init_angle = 0.3 * math.pi // 54 degrees

// Exercise 4:
def init_x_vel = init_speed * math.cos(init_angle)
def init_y_vel = init_speed * math.sin(init_angle)

// Exercise 5:
fun y_pos(t):
  def altitude = (init_y_vel * t) - (0.5 * 0.003 * t * t)
  altitude

y_pos(0)

// check_within and check_expect

// Exercise 6:

fun x_pos(t):
  def horizontal_position = init_x_vel * t
  horizontal_position

x_pos(0)
println("")
println("")

println("3. Putting it together")

// Exercise 7.
fun launch(t):
  place_image(sprite, x_pos(t), scenery.height-y_pos(t), scenery)

launch(0)
launch(200)
launch(400)
launch(600)
launch(800)

expr.macro 'big_bang $(init :: expr_meta.Parsed):
              ~draw: $(_draw :: expr_meta.Parsed)
              ~tick: $(tick :: expr_meta.Parsed)':
  'block:
     let draw = fun (w): pict.to_bitmap($_draw(w))
     $(expr_meta.pack_s_exp(['_big_bang', init,
                             ['_on_tick', tick],
                             ['_to_draw', 'draw']]))'
/*
fun draw(n):
  image.overlay(image.circle(~size: n),
                image.square(~size: 400))
*/
//fun tick(n): n+1
// universe.animate(fun (n): pict.to_bitmap(launch(n)))

fun animate(x):
  universe.animate(fun (n): pict.to_bitmap(x(n)))

animate(launch)
//universe.animate(fun (n): pict.to_bitmap(draw(n)))
/*
big_bang 0+100:
  ~draw: draw
  ~tick: fun (n): n+1
                  */