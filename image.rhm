;; ship stands for ShortHandImageProgram
;; to_do: fix the text size
#lang rhombus

import: pict as p
        pict/radial as pr
        draw
        rhombus/rx open
        
export: mode_to_color
        circle
        ellipse
        line
        text
        triangle
        square
        rectangle
        rhombus
        star
        overlay 
        beside
        above
        empty_scene
        place_image
        scene_line
        rotate
        scale_xy
        place_images
        posn
        beside_align
        overlay_align
        above_align
        
// check make pen
// call racket functions from 2htdp img
// unit testing: test: text, place_image, rotate
fun mode_to_color(mode):
  cond
  | mode == "solid": [#'inherit,1]
  | mode == "outline": [#false,1]
  | mode is_a Number: mode :: Real.in(0,255 ~inclusive)
                      [#'inherit,mode/255]
  | ~else: error(~who: #'mode_to_color,
                 "expects a mode as second argument",
                 ~details: ["given:",mode])

check mode_to_color("solid") ~is [#'inherit,1]
check mode_to_color("outline") ~is [#false,1]
check mode_to_color(11) ~is [#'inherit,11/255]

fun circle(radius :: NonnegReal, mode, color :: String):
  def md = mode_to_color(mode)
  p.circle(~size:radius * 2, ~fill: md[0]).colorize(color).alpha(md[1])

check circle(30,"outline","red").width ~is 60
check circle(30,"outline","red").height ~is 60
check circle(20,"solid","blue").width ~is 40
check circle(20,"solid","blue").height ~is 40
check circle(0,100,"blue").width ~is 0
check circle(0,100,"blue").height ~is 0

fun ellipse(width :: NonnegReal, height :: NonnegReal, mode, color :: String):
  def md = mode_to_color(mode)
  p.ellipse(~width:width,~height:height,~fill:md[0]).colorize(color).alpha(md[1])

check ellipse(60,30,"outline","black").width ~is 60
check ellipse(60,30,"outline","black").height ~is 30
check ellipse(30,60,"solid","blue").width ~is 30
check ellipse(30,60,"solid","blue").height ~is 60
check ellipse(30,60,100,"blue").width ~is 30
check ellipse(30,60,100,"blue").height ~is 60

fun line(x1, y1, clr):
  p.line(~dx: x1, ~dy: y1, ~line: clr)

check line(30,30,"black").width ~is 30
check line(30,30,"black").height ~is 30
check line(-30,20,"red").width ~is -30
check line(-30,20,"red").height ~is 20
check line(30,-20,"red").width ~is 30
check line(30,-20,"red").height ~is -20
check line(10,0,"red").width ~is 10
check line(10,0,"red").height ~is 0
check line(0,10,"red").width ~is 0
check line(0,10,"red").height ~is 10
check line(0,0,"red").width ~is 0
check line(0,0,"red").height ~is 0

fun string_to_list(s):
  def x = List.map(s , fun(x): string_to_list_helper(x))
  def y = for List ( z : x):
    cond
    |z.length() == 0: [] ++ [""]
    | ~else: z
  y
  
fun string_to_list_helper(s):
  cond
  | s.length() == 0: []
  | ~else: [s.substring(0,1)] ++ string_to_list_helper(s.substring(1..))


fun text(string :: String, font_size ::  Real.in(1, 255 ~inclusive), color :: String ):
  def list_of_words = rx'"\n"'.split(string)
  def lists_of_chars = string_to_list(list_of_words)
  def st1 = for List (x : lists_of_chars):
    def st2 = for List ( y : x) :
      p.text(y,~font:draw.Font(~kind: draw.Font.Kind.swiss,~size:font_size)).colorize(color)
    p.beside(~vert: #'baseline,&st2)
  p.stack(~horiz:#'left,& st1)
// 2htdp takes the string, it splits it up into individual letters and horizontally
// appends them // do baseline with beside
  
fun triangle(side_len :: NonnegReal, mode, color:: String):
  def md = mode_to_color(mode)
  def h = math.round(side_len * math.sqrt(3)/2)
  p.polygon([[side_len/2,0], [side_len,h], [0,h]], ~fill: md[0]).colorize(color).alpha(md[1])

check triangle(100,255,"red").width ~is 100
check triangle(100,255,"red").height ~is 87.0
check triangle(40,255,"red").width ~is 40
check triangle(40,255,"red").height ~is 35.0

fun square(side_len :: NonnegReal, mode, color :: String):
  def md = mode_to_color(mode)
  p.square(~size:side_len, ~fill: md[0]).colorize(color).alpha(md[1])

check square(30,255,"red").width ~is 30
check square(30,255,"red").height ~is 30
check square(40,"solid","slateblue").width ~is 40
check square(40,"solid","slateblue").height ~is 40
check square(50,"outline","darkmagenta").width ~is 50
check square(50,"outline","darkmagenta").height ~is 50

fun rectangle(width :: NonnegReal, height :: NonnegReal, mode, color :: String):
  def md = mode_to_color(mode)
  p.rectangle(~width:width, ~height:height, ~fill:md[0]).colorize(color).alpha(md[1])

check rectangle(100,90,255,"red").width ~is 100
check rectangle(100,90,255,"red").height ~is 90
check rectangle(40,20,"outline","black").width ~is 40
check rectangle(40,20,"outline","black").height ~is 20
check rectangle(20,40,"solid","blue").width ~is 20
check rectangle(20,40,"solid","blue").height ~is 40

fun rhombus(side_length :: NonnegReal, angle :: Number, mode, color :: String):
  def md = mode_to_color(mode)
  def new_angle = angle/2
  def opposite_angle = ((180 - angle) / 2) * math.pi / 180
  def h = math.round(2 * math.sin(opposite_angle) * side_length)
  def w = math.round(2 * math.cos(opposite_angle) * side_length)
  p.polygon([[0,h/2], [w/2,0],[w,h/2], [w/2, h]], ~fill: md[0]).colorize(color).alpha(md[1])

check rhombus(40,45,"solid","magenta").width ~is 31.0
check rhombus(40,45,"solid","magenta").height ~is 74.0
check rhombus(80,150,"solid","mediumpurple").width ~is 155.0
check rhombus(80,150,"solid","mediumpurple").height ~is 41.0

fun star(side_length :: Number, mode, color :: String):
  def md = mode_to_color(mode)
  def angle = 36 * math.pi / 180
  def Rc = side_length / (2 * math.sin(angle))
  def Ri = side_length / (2 * math.tan(angle))
  def h = math.round(Rc + Ri)
  def w = math.round(side_length + 2 * side_length  * math.cos(2 * angle))
  pr.star(~points: 5, ~width: w, ~height: h,~fill: md[0]).colorize(color).alpha(md[1])

check star(40,"solid","gray").width ~is 65.0
check star(40,"solid","gray").height ~is 62.0
  
fun overlay(x :: p.Pict,...): 
  p.overlay(~order:#'back,x,...)

check overlay(rectangle(30,60,"solid","orange"),ellipse(60,30,"solid","purple")).width ~is 60
check overlay(rectangle(30,60,"solid","orange"),ellipse(60,30,"solid","purple")).height ~is 60
check overlay(ellipse(10,10,"solid","red"),
              ellipse(20,20,"solid","black"),
              ellipse(30,30,"solid","red"),
              ellipse(40,40,"solid","black"),
              ellipse(50,50,"solid","red"),
              ellipse(60,60,"solid","black"),).width ~is 60
check overlay(ellipse(10,10,"solid","red"),
              ellipse(20,20,"solid","black"),
              ellipse(30,30,"solid","red"),
              ellipse(40,40,"solid","black"),
              ellipse(50,50,"solid","red"),
              ellipse(60,60,"solid","black"),).height ~is 60

fun beside(x :: p.Pict,...): 
  p.beside(x,...)

check beside(ellipse(20,70,"solid","gray"),
             ellipse(20,50,"solid","darkgray"),
             ellipse(20,30,"solid","dimgray"),
             ellipse(20,10,"solid","black")).width ~is 80
check beside(ellipse(20,70,"solid","gray"),
             ellipse(20,50,"solid","darkgray"),
             ellipse(20,30,"solid","dimgray"),
             ellipse(20,10,"solid","black")).height ~is 70

fun above(x :: p.Pict,...):
  p.stack(x,...)

check above(ellipse(70,20,"solid","gray"),
            ellipse(50,20,"solid","darkgray"),
            ellipse(30,20,"solid","dimgray"),
            ellipse(10,20,"solid","white")).width ~is 70
check above(ellipse(70,20,"solid","gray"),
            ellipse(50,20,"solid","darkgray"),
            ellipse(30,20,"solid","dimgray"),
            ellipse(10,20,"solid","white")).height ~is 80

fun empty_scene(width :: NonnegReal, height :: NonnegReal):
  p.rectangle(~width:width, ~height:height, ~fill:"white",~line:"black")
  
check empty_scene(160,90).width ~is 160
check empty_scene(160,90).height ~is 90
check empty_scene(200,200).width ~is 200
check empty_scene(200,200).height ~is 200

fun place_image(image :: p.Pict, x :: Real, y :: Real, scene :: p.Pict):
  p.pin(~on: scene,~at: p.Find.left_top(scene,~dx:x,~dy:y),~pinhole: p.Find.center(image),image).clip()

fun scene_line(image :: p.Pict, x1 :: Real, y1 :: Real, x2 :: Real, y2 :: Real, clr):
  def ln = line(x2-x1,y2-y1,clr)
  p.pin(~on: image,~at: p.Find.left_top(image,~dx:x1,~dy:y1),~pinhole: p.Find.left_top(ln),ln).clip()
 
check scene_line(ellipse(40,40,"outline","maroon"),0,40,40,0,"maroon").width ~is 40
check scene_line(ellipse(40,40,"outline","maroon"),0,40,40,0,"maroon").height ~is 40
check scene_line(rectangle(40,40,"solid","gray"),0,40,40,0,"maroon").width ~is 40
check scene_line(rectangle(40,40,"solid","gray"),0,40,40,0,"maroon").height ~is 40
check scene_line(rectangle(100,100,"solid","darkolivegreen"),25,25,100,100,"goldenrod").width ~is 100
check scene_line(rectangle(100,100,"solid","darkolivegreen"),25,25,100,100,"goldenrod").height ~is 100
check scene_line(ellipse(0,0,"outline","maroon"),0,40,40,0,"maroon").width ~is 0
check scene_line(ellipse(0,0,"outline","maroon"),0,40,40,0,"maroon").height ~is 0

fun rotate(angle :: Number, image :: p.Pict): // rotate extends the bounding box
  image.rotate(angle * math.pi/180)
  
fun scale_xy(x :: NonnegReal, y :: NonnegReal, image :: p.Pict):
  image.scale(x,y)

check scale_xy(2,3,rectangle(100,90,255,"red")).width ~is 200
check scale_xy(2,3,rectangle(100,90,255,"red")).height ~is 270
check scale_xy(3,2,ellipse(20,30,"solid","blue")).width ~is 60
check scale_xy(3,2,ellipse(20,30,"solid","blue")).height ~is 60

class posn(x,y)

fun place_images(i :: List.of(p.Pict), p :: List.of(posn), scene :: p.Pict):
  match i
  | []: scene
  | ~else: place_images(List.rest(i),List.rest(p), place_image(i[0],p[0].x,p[0].y,scene))

/*
place_images([circle(4,"solid","white"),
              circle(4,"solid","white"),
              circle(4,"solid","white"),
              circle(4,"solid","white")
              ],
             [posn(18,20),posn(0,6),
              posn(14,2),posn(8,14)],
             rectangle(24,24,255,"goldenrod"))
*/
  // fun place_image(image :: p.Pict, x :: Real, y :: Real, scene :: p.Pict):
  
// [circle(20,255,"red"),circle(20,255,"red")] is_a List.of(p.Pict)

//did not do pinhole here so ask about it
// middle and center
// topline
// "top", "bottom", "middle", "center", "baseline", "pinhole".
fun y_place(x): 
  cond
  | x == "top": #'top
  | x == "topline": #'topline
  | x == "center": #'center
  | x == "baseline": #'baseline
  | x == "bottom": #'bottom

//missing arg?
fun beside_align(y, x :: p.Pict,...):
  p.beside(~vert: y_place(y), x,...)

//did not do pinhole here so ask about it
  
// "left", "right", "middle", "center", "pinhole".
fun x_place(x):
  cond
  | x == "left": #'left
  | x == "center": #'center
  | x == "right": #'right

// add pinhole
// fix expects 4
fun overlay_align(xplace,yplace,i1 :: p.Pict,i2 :: p.Pict,...):
  p.overlay(~horiz: x_place(xplace), ~vert: y_place(yplace), ~order:#'back, i1,i2, ...)

// overlay_align("left","center",rectangle(30,60,255,"orange"),ellipse(60,30,"solid","purple"))

// same comments as the previous 2 functions
fun above_align(xplace,i1 :: p.Pict,i2 :: p.Pict,...):
  p.stack(~horiz: x_place(xplace),i1,i2,...)