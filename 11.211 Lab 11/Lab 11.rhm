#lang rhombus

import: "../shp.rhm" open
// 211: Forking turtles
        
class turn(angle::Number)
class draw(distance::Number)
class fork(child) // child is of a type trip. A trip is a list of draws and turns.

def child_trip = [turn(30), draw(50)]
def y_trip = [draw(50), fork(child_trip), turn(-30), draw(50)]

println("Exercise 1")
println("")
// exercise 1
def fork_trip1 = [turn(40),draw(50),fork([turn(100),draw(50)]),turn(-90),draw(50)]
def fork_trip2 = [turn(-60),draw(20),fork([turn(120),draw(20)]),fork([draw(20)]),turn(-60),draw(20)]

// exercise 2 and exercise 3 - wip

println("Exercise 4")
println("")
fun step_length(s):
  match s:
  |turn(a): 0
  |draw(d): d
  |fork(c): trip_length(c)

fun trip_length(t:: List):
  match t
  |[]: 0
  |[a,b,...]: step_length(a) + trip_length([b,...])

step_length(turn(90))
step_length(draw(90))
step_length(fork([turn(100),draw(50)]))

trip_length(y_trip)
trip_length(fork_trip1)
trip_length(fork_trip2)
println("")

println("Exercise 5")
println("")
check step_length(turn(90)) ~is 0
check step_length(draw(90)) ~is 90
check step_length(fork([turn(100),draw(50)])) ~is 50

check trip_length([]) ~is 0
check trip_length([turn(30), draw(50)]) ~is 50
check trip_length(y_trip) ~is 150
check trip_length(fork_trip1) ~is 150
check trip_length(fork_trip2) ~is 80
// they pass because we changed step_length
println("")

println("Exercise 6") // test s'more
println("")
class turtle(x::Number,y::Number,dir::Number)

def t = turtle(24,25,90)
check t.x ~is 24
check t.y ~is 25
check t.dir ~is 90

fun turtle_rad(t :: turtle):
  t.dir * math.pi/180

fun move(s,t :: turtle):
  match s:
  | turn(a): t with (dir = a + t.dir)
  | draw(d): t with (x = t.x + d * math.cos(turtle_rad(t)),
                     y = t.y - d * math.sin(turtle_rad(t)))
  | fork(c): t

move(draw(100),turtle(60,50,270))
move(fork(child_trip),turtle(60,50,270))
println("")

println("Exercise 7") // test s'more
println("")
fun draw_step(s, t:: turtle, i):
  match s:
  |turn(a): i
  |draw(d): scene_line(i, t.x, t.y,move(s,t).x,move(s,t).y,"red")
  |fork(c): draw_trip(c,t,i)

// check scene_line(square(200,"outline","red"),60,50,60,150,"red") ~is draw_step(turn(90),turtle(60,50,270),square(200,"outline","red")) check this
draw_step(draw(90),turtle(60,50,270),empty_scene(200,200))

fun draw_trip(ls,t,i):
  match ls:
  | []: i
  | [a,b,...]: draw_trip([b,...], move(a, t),draw_step(a,t,i))

draw_trip(y_trip,turtle(75,125,0),empty_scene(200,200))
draw_trip(fork_trip1,turtle(75,125,0),empty_scene(200,200))
draw_trip(fork_trip2,turtle(85,85,0),empty_scene(200,200))
println("")
//adapting implementin beginning graphics library for beginner programmers in rhombus show examples
//implement this and heres how to write this and heres the pictures

println("Exercise 8") // test s'more
println("")
// Exercise 8. Add a test for draw-trip that uses make-fork.
// they pass because we changed draw_step

println("Exercise 9") // test s'more // Check when count is 0 and when count is 1
println("")
fun radiate(count :: NonnegReal, angle :: Number, trip):
  if count == 0:
  |[]
  |List.append(List(fork(trip))).add(turn(angle)) ++ radiate(count-1, angle,trip)

radiate(10,-15,[draw(80)])
radiate(5,-72,[draw(50),turn(120)] ++ radiate(7,-40,[draw(20)]))

check [fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15),
       fork([draw(80)]),
       turn(-15)
       ] ~is radiate(10,-15,[draw(80)])

check radiate(10,-15,[draw(80)]) ~is [fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15),
                                      fork([draw(80)]),
                                      turn(-15)
                                      ]

draw_trip(radiate(10,-15,[draw(80)]),turtle(90,100,90),empty_scene(200,200))
draw_trip(radiate(5,-72,[draw(50),turn(120)] ++ radiate(7,-40,[draw(20)])),turtle(100,100,0),empty_scene(200,200))
println("")

println("Exercise 10")
println("")
fun enlarge_step(n, s):
  match s:
  |turn(a): s
  |draw(d): s with (distance = d * n)
  |fork(c): s with (child = enlarge_trip(n,c))

fun enlarge_trip(n, ls):
  match ls:
  | []: ls
  | [a,b,...]: List.cons(enlarge_step(n, a),enlarge_trip(n, [b,...]))

enlarge_step(2,turn(90))
enlarge_step(3,turn(90))
enlarge_step(2,draw(90))
enlarge_step(3,draw(90))
enlarge_step(2,fork([turn(100),draw(50)]))
enlarge_step(3,fork([turn(100),draw(50)]))

enlarge_trip(2,[])
enlarge_trip(3,[])
enlarge_trip(2,y_trip)
enlarge_trip(3,y_trip)

check enlarge_step(2,turn(90)) ~is turn(90)
check enlarge_step(3,turn(90)) ~is turn(90)
check enlarge_step(2,draw(90)) ~is draw(180)
check enlarge_step(3,draw(90)) ~is draw(270)
check enlarge_step(2,fork([turn(100),draw(50)])) ~is fork([turn(100), draw(100)])
check enlarge_step(3,fork([turn(100),draw(50)])) ~is fork([turn(100), draw(150)])

check enlarge_trip(2,[]) ~is []
check enlarge_trip(3,[]) ~is []
check enlarge_trip(2,y_trip) ~is [draw(100), fork([turn(30), draw(100)]), turn(-30), draw(100)]
check enlarge_trip(3,y_trip) ~is [draw(150), fork([turn(30), draw(150)]), turn(-30), draw(150)]
println("")

println("Exercise 11")
println("")
fun generations(n):
  if n == 0:
  | []
  | [draw(64),turn(30),fork(enlarge_trip(0.5,generations(n-1))),turn(-60),fork(enlarge_trip(0.5,generations(n-1)))]

draw_trip(generations(7),turtle(40,125,0),empty_scene(200,200))
println("")

println("5. Challenge")
println("")