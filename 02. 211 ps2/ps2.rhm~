#lang rhombus

import:
  pict as p
  pict/radial as pr
  draw

println("1 Warmup: calculating numbers")
println("")
// Exercise 1.
// (If you’re not sure how to define a variable, review Lecture 2: Definitions Exercise 1.)
// Define the variable x to be a big number.
// Put digits only in your definition of x, not in your definition of y.
println("Exercise 1")

def x = 1000
x
// Then define the variable y to be the cube of x.
def y = x * x * x
y
def y2 = math.expt(x,3)
y2
println("")
println("")

// Exercise 2.
// In comments, show step-by-step calculations that lead from your definition of y to its computed numeric value.
// Show a separate step for each time your definition of x is used, and for each time a bigger number is produced.
// So, your calculations should include at least 2 steps (depending on how many times your definition of y uses x).
// (If you’re not sure how to calculate step-by-step, review Lecture 1: DrRacket and arithmetic Exercises 10 and 13 and Lecture 2: Definitions Exercise 7.)
// def y = x * x * x
// def y = 1000 * 1000 * 1000
// def y = 1000000 * 1000
// def y = 1000000000

// Exercise 3.
// Define a function cube that takes a number x as input and returns its cube.
// We’ve already given the signature and purpose for the function:
// cube : Number -> Number
// produce the third power of the given number
// Here are some examples of using cube:
// (cube 4) should be 64
// (cube 1) should be 1
// And your definition should look like this:
// (define (cube x)
//  FILL-IN-THIS-BLANK)
// (If you’re not sure how to define a function, review Lecture 2: Definitions Exercise 4.) Use your new function to compute the cube of 10.

println("2 Eat/Die")
println("")

println("Exercise 3")
fun cube(x):
  x*x*x

cube(4)
cube(1)
println("")

// Exercise 4.
// Let us compute the cube of the cube of the cube of 3.
// In comments, show step-by-step calculations that begin with
// ;   (cube (cube (cube 3)))
// ; = FILL IN REMAINING STEPS
// Show a separate step for each time your definition of cube is used,
// and for each time a bigger number is produced.
// So, your calculations should include at least 6 steps.
// (If you’re not sure how to calculate step-by-step, review Lecture 2: Definitions Exercise 7.)
// cube(cube(cube(3)))
// cube(cube(3*3*3))
// cube(cube(9*3))
// cube(cube(27))
// cube(27*27*27)
// cube(729*27)
// cube(19683)
// 19683*19683*19683
// 387420489*19683

println("Exercise 5")
// Exercise 5.
// Define the variable diamond-eat to be an image similar to the left half of the diptych above.
// To do so, use the overlay function provided by the 2htdp/image library to combine three images:
// a dark green text image, produced using the text function,
// a solid red circle, produced using the circle function, and
// a dark green diamond, produced either using the rhombus function or using the rotate and square functions.
def dmd = p.square(~size:100,~fill:#'inherit).rotate(0.758)
def circle = p.circle(~size:95,~fill:#'inherit)

def eat = p.text("EAT",~font: draw.Font(~size: 30)).colorize("darkgreen")
def red_crcl = circle.colorize("red")
def grn_dmd = dmd.colorize("darkgreen")
def diamond_eat = p.overlay(~order:#'back,eat,red_crcl,grn_dmd)
diamond_eat

println("")

// Exercise 6.
// Define a function diamond that takes a string and returns an image of it inside a circle inside a diamond.
// Your function should have this signature and purpose:
// ; diamond : String -> Image
// ; draw a diamond with the given text inside
// ; (diamond "EAT") should be the picture above
println("Exercise 6")

fun diamond(x):
  def grndmd = p.square(~size:100,~fill:"darkgreen").rotate(0.758)
  def redcrcl = p.circle(~size:95,~fill:"red")
  def txtinput = p.text(x,~font: draw.Font(~size: 30)).colorize("darkgreen")
  p.overlay(~order:#'back,txtinput,redcrcl,grndmd)

diamond("EAT")
println("")

// Exercise 7.
// Define the variable diptych to be an image similar to Robert Indiana’s diptych above.
// To do so, use your diamond function twice,
// and combine the resulting images using the beside function provided by the 2htdp/image library.
// A computer scientist might diagram the operations as follows:
println("Exercise 7")

def dipytch = p.beside(diamond("EAT"),diamond("DIE"))
dipytch

println("")
println("")

println("3 Womb")
// Exercise 8.
// Define the variable blue-arrow-on-yellow to be an image similar to the
// lower-right arrow on the sculpture above.
// To do so, use the overlay and above functions provided by the
// 2htdp/image library to combine three images:
// a solid blue triangle,
// a solid blue rectangle, and
// a solid yellow circle.
// A computer scientist might diagram the operations as follows:
println("Exercise 8")
def blu_rect = p.rectangle(~width:25,~height:50,~fill:"darkblue")
def blue_tri = pr.radial_pict(~points:3,~fill:"darkblue")
def arw = p.stack.center(~sep:-19,blue_tri,blu_rect)
// alternatively we could define arrow as
def blu_arw = pr.arrow(~length:80, ~breadth:50,~fill:"darkblue",~rotate:1.57)
def ylw_crcl = p.circle(~size:100,~fill:"yellow")
def blue_arrow_on_yellow = p.overlay(~order:#'back,blu_arw,ylw_crcl)
def blu_arw_on_ylw = p.overlay(~order:#'back,arw,ylw_crcl)

blue_arrow_on_yellow
blu_arw_on_ylw
println("")

// Exercise 9.
// Define a function arrow that takes two colors and returns
// an image of an arrow of the first given color inside a circle of the second given color.
// Your function should have this signature and purpose:
println("Exercise 9")

fun arrow(clr1, clr2):
  def blu_arw = pr.arrow(~length:80, ~breadth:50,~fill:clr1,~rotate:1.57)
  def ylw_crcl = p.circle(~size:100,~fill:clr2)
  p.overlay(~order:#'back,blu_arw,ylw_crcl)

arrow("blue","yellow")
println("")

// Exercise 10.
// Use your arrow function and the rotate function provided by the 2htdp/image
// library to recreate the upper-right arrow on the sculpture:
println("Exercise 10")
arrow("red","darkgreen").rotate(1.57)
println("")

// Exercise 11.
// Define the variable womb to be an image similar to the painted arrows on
// Robert Indiana’s sculpture above.
// To do so, use your arrow function 4 times and the rotate function 3 times,
// and combine the resulting images using the beside and above functions provide
// d by the 2htdp/image library. Again, using something means putting its name in your code,
// so your definition of womb should not contain overlay or triangle or rectangle or circle or any picture.
println("Exercise 11")
def topleft = arrow("yellow","blue").rotate(-3.14)
def topright= arrow("red","darkgreen").rotate(1.57)
def toprow = p.beside(topleft, topright)

def bottomleft = arrow("darkgreen","red").rotate(-1.57)
def bottomright = arrow("blue","yellow")
def bottomrow = p.beside(bottomleft, bottomright)

def womb = p.stack(toprow,bottomrow)
womb

println("")
println("")

println("Extra fun")
println("Exercise 12")
println("")
println("Exercise 13")
println("")
println("Exercise 14")

fun vertical_triband(clr1, clr2, clr3):
  def band = p.rectangle(~width:150,~height:100,~fill:#'inherit)
  p.beside(band.colorize(clr1),band.colorize(clr2),band.colorize(clr3))
  //ask if numbers were mixed up in the prompt
  
vertical_triband("blue", "white", "red")

println(""
fun horizontal_triband(clr1, clr2, clr3):
  vertical_triband(clr1, clr2, clr3).rotate(-1.57).scale(3,1/3)
  
horizontal_triband("darkred", "white", "blue")
println("")