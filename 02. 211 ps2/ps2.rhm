#lang rhombus

import:
  pict as p
  pict/radial as pr
  draw

println("1 Warmup: calculating numbers")
println("")

// Exercise 1.
println("Exercise 1")

def x = 1000
x
// Then define the variable y to be the cube of x.
def y = x * x * x
y
def y2 = math.expt(x,3)
y2
println("")
println("")

// Exercise 2.
// def y = x * x * x
// def y = 1000 * 1000 * 1000
// def y = 1000000 * 1000
// def y = 1000000000


println("2 Eat/Die")
println("")

// Exercise 3.
println("Exercise 3")
fun cube(x):
  x*x*x

cube(4)
cube(1)
println("")

// Exercise 4.
// cube(cube(cube(3)))
// cube(cube(3*3*3))
// cube(cube(9*3))
// cube(cube(27))
// cube(27*27*27)
// cube(729*27)
// cube(19683)
// 19683*19683*19683
// 387420489*19683

println("Exercise 5")
// Exercise 5.
def dmd = p.square(~size:100,~fill:#'inherit).rotate(0.758)
def circle = p.circle(~size:95,~fill:#'inherit)

def eat = p.text("EAT",~font: draw.Font(~size: 30)).colorize("darkgreen")
def red_crcl = circle.colorize("red")
def grn_dmd = dmd.colorize("darkgreen")
def diamond_eat = p.overlay(~order:#'back,eat,red_crcl,grn_dmd)
diamond_eat

println("")

// Exercise 6.
println("Exercise 6")

fun diamond(x):
  def grndmd = p.square(~size:100,~fill:"darkgreen").rotate(0.758)
  def redcrcl = p.circle(~size:95,~fill:"red")
  def txtinput = p.text(x,~font: draw.Font(~size: 30)).colorize("darkgreen")
  p.overlay(~order:#'back,txtinput,redcrcl,grndmd)

diamond("EAT")
println("")

// Exercise 7.
println("Exercise 7")

def dipytch = p.beside(diamond("EAT"),diamond("DIE"))
dipytch

println("")
println("")

println("3 Womb")
// Exercise 8.
println("Exercise 8")
def blu_rect = p.rectangle(~width:25,~height:50,~fill:"blue")
def blue_tri = pr.radial_pict(~points:3,~fill:"blue",~bound: #'shrink)
def arw = p.stack.center(blue_tri,blu_rect)
// alternatively we could define arrow as
def blu_arw = pr.arrow(~length:80, ~breadth:50,~fill:"blue",~rotate:1.57)
def ylw_crcl = p.circle(~size:100,~fill:"yellow")
def blue_arrow_on_yellow = p.overlay(~order:#'back,blu_arw,ylw_crcl)
def blu_arw_on_ylw = p.overlay(~order:#'back,arw,ylw_crcl)

blue_arrow_on_yellow
blu_arw_on_ylw
println("")

// Exercise 9.
println("Exercise 9")

fun arrow(clr1, clr2):
  def blu_arw = pr.arrow(~length:80, ~breadth:50,~fill:clr1,~rotate:1.57)
  def ylw_crcl = p.circle(~size:100,~fill:clr2)
  p.overlay(~order:#'back,blu_arw,ylw_crcl)

arrow("blue","yellow")
println("")

// Exercise 10.
println("Exercise 10")
arrow("red","darkgreen").rotate(1.57)
println("")

// Exercise 11.
println("Exercise 11")
def topleft = arrow("yellow","blue").rotate(-3.14)
def topright= arrow("red","darkgreen").rotate(1.57)
def toprow = p.beside(topleft, topright)

def bottomleft = arrow("darkgreen","red").rotate(-1.57)
def bottomright = arrow("blue","yellow")
def bottomrow = p.beside(bottomleft, bottomright)

def womb = p.stack(toprow,bottomrow)
womb

println("")
println("")

println("Extra fun")
println("Exercise 12")

fun amdrm(txt):
  def amdrm_crcl = p.circle(~size:100,~fill:#'inherit)
  def tex = p.text(txt,~font: draw.Font(~size:30)).colorize("white")
  p.overlay(~order:#'back,tex,amdrm_crcl)

def eat_amdrm = amdrm("EAT")
def hug_amdrm = amdrm("HUG")
def die_amdrm = amdrm("DIE")
def err_amdrm = amdrm("ERR")
def r2_amdrm=p.beside(~sep:100,hug_amdrm,die_amdrm)
def p1 = p.stack(~sep:-30,eat_amdrm,r2_amdrm)
def lctrc_am_drm = p.stack(~sep:-30,p1,err_amdrm)
lctrc_am_drm
println("")

// Exercise 13.
println("Exercise 13")

fun trmph_of_tra(txt,txt_clr,bg_crcl_clr,sqr_clr,sml_crcl_clr,str_clr,rott):
  def bg_crcl = p.circle(~size:150,~fill:bg_crcl_clr)
  def sqr = p.square(~size:100,~fill:sqr_clr).rotate(rott)
  def sml_crcl = p.circle(~size:100,~fill:sml_crcl_clr)
  def star = pr.star(~points:5, ~width:100,~fill:str_clr)
  def tot_txt = p.text(txt,~font: draw.Font(~size:16)).colorize(txt_clr)
  p.overlay(~order:#'back, tot_txt,star,sml_crcl,sqr,bg_crcl)

def law = trmph_of_tra("LAW","blue","yellow","black","red","black",0.758)
def cat = trmph_of_tra("CAT","yellow","red","blue","black","red",0)
def tot_r1 = p.beside(~sep:20,law, cat)

def men = trmph_of_tra("MEN","yellow","red","blue","red","black",0)
def sex = trmph_of_tra("SEX","blue","yellow","black","blue","red",0.758)
def tot_r2 = p.beside(~sep:20,men,sex)

def tot_crcls = p.stack(~sep:20,tot_r1,tot_r2)
def triumph_of_tira = p.overlay(~order:#'back,tot_crcls,p.square(~size:350,~fill:"black"))
triumph_of_tira

println("")

println("Exercise 14")

fun vertical_triband(clr1, clr2, clr3):
  def band = p.rectangle(~width:50,~height:100,~fill:#'inherit)
  p.beside(band.colorize(clr1),band.colorize(clr2),band.colorize(clr3))
  //ask if numbers were mixed up in the prompt
  // if they were then use 2 and 1/2 for the scale below
  
vertical_triband("blue", "white", "red")

println("")

fun horizontal_triband(clr1, clr2, clr3):
  vertical_triband(clr1, clr2, clr3).rotate(math.pi/-2).scale(3/2,2/3)
  
horizontal_triband("darkred", "white", "blue")
println("")

//define your own functions such as the diamond function
//use htdp style functions