#lang rhombus

import: "../shp.rhm" open

println("1 Warmup: calculating numbers")
println("")

println("Exercise 1")
def x = 1000
def y = x * x * x
x
y
println("")

// Exercise 2.
// println("Exercise 2")
// def y = x * x * x
// def y = 1000 * 1000 * 1000
// def y = 1000000 * 1000
// def y = 1000000000

println("Exercise 3")
// cube : Number -> Number
// produce the third power of the given number
fun cube(x :: Number):
  x*x*x
  
cube(4)
cube(1)
println("")

// Exercise 4.
// cube(cube(cube(3)))
// cube(cube(3*3*3))
// cube(cube(9*3))
// cube(cube(27))
// cube(27*27*27)
// cube(729*27)
// cube(19683)
// 19683*19683*19683
// 387420489*19683

println("2 Eat/Die")
println("")

println("Exercise 5")
def eat= text("EAT",30,"darkgreen")
def rd_crcl = circle(47.5,"solid","red")
def grn_dmd = rotate(45,square(100, "solid", "darkgreen"))
def diamond_eat = overlay(eat,rd_crcl,grn_dmd)
diamond_eat
println("")

println("Exercise 6")
// diamond : String -> Image
// draw a diamond with the given text inside
fun diamond(string):
  def txt = text(string,30,"darkgreen")
  def rd_crcl = circle(47.5,"solid","red")
  def grn_dmd = rhombus(100,90,255,"darkgreen")
  overlay(txt,rd_crcl,grn_dmd)

diamond("EAT")
def diamond_eat1 = diamond("EAT")
diamond_eat1
println("")

println ("Exercise 7")
def dipytch = beside(diamond("EAT"),diamond("DIE"))
dipytch
println("")

println("3 Womb")
println("")

println("Exercise 8")
def blue_arrow_on_yellow = overlay(above(triangle(45,"solid","blue"),rectangle(20,45,"solid","blue")),circle(50,"solid","yellow"))
blue_arrow_on_yellow
println("")

println("Exercise 9")
// arrow : Color Color -> Image
// draw an arrow of the first color inside a circle of the second color
fun arrow(clr1, clr2):
  overlay(above(triangle(45,"solid",clr1),rectangle(20,45,"solid",clr1)),circle(50,"solid",clr2))

arrow("blue", "yellow")
def blue_arrow_on_yellow0 = arrow("blue", "yellow")
blue_arrow_on_yellow0
println("")

println("Exercise 10")
rotate(90,arrow("red", "darkgreen"))
println("")

println("Exercise 11")
def blue_arrow_on_yellow1 = arrow("blue", "yellow")
def arrow1 = rotate(180, arrow("yellow","blue"))
def arrow2 = rotate(90,arrow("red", "darkgreen"))
def arrow3 = rotate(270,arrow("darkgreen", "red"))
def arrow4 = arrow("blue","yellow")
above(beside(arrow1,arrow2),beside(arrow3,arrow4))
println("")

println("Extra fun")
println("")

println("Exercise 12")
fun american_dream(inpt):
  def american_dream_circle = circle(50,"solid","black")
  def txt = text(inpt,30,"white")
  overlay(txt,american_dream_circle)

def eat_ef = american_dream("EAT")
def hug_ef = american_dream("HUG")
def die_ef = american_dream("DIE")
def err_ef = american_dream("ERR")
def bg_ef = square(300,255,"white")
def img_ef = place_image(hug_ef,145,70,bg_ef)
def img_ef2 = place_image(eat_ef,70,150,img_ef)
def img_ef3 = place_image(die_ef,220,150,img_ef2)
def img_ef4 = place_image(err_ef,145,225,img_ef3)
img_ef4
println("")

println("Exercise 13")
fun trmph_of_tra(txt,txt_clr,bg_crcl_clr,sqr_clr,sml_crcl_clr,str_clr,rott):
  def bg_crcl = circle(75,"solid",bg_crcl_clr)
  def sqr = square(100,"solid",sqr_clr).rotate(rott)
  def sml_crcl = circle(50,"solid",sml_crcl_clr)
  def str =  star(65,255,str_clr)
  def tot_txt = text(txt,16,txt_clr)
  overlay(tot_txt,str,sml_crcl,sqr,bg_crcl)

def law = trmph_of_tra("LAW","blue","yellow","black","red","black",0.758)
def cat = trmph_of_tra("CAT","yellow","red","blue","black","red",0)
def row1 = beside(law,square(10, "outline","black"), cat)

def men = trmph_of_tra("MEN","yellow","red","blue","red","black",0)
def sex = trmph_of_tra("SEX","blue","yellow","black","blue","red",0.758)
def row2 = beside(men,square(10, "outline","black"),sex)

def all_circles = above(row1,square(10, "outline","black"),row2)
def triumph_of_tira = overlay(all_circles,square(325,255,"black"))
triumph_of_tira
println("")

println("Exercise 14")
fun vertical_triband(clr1, clr2, clr3):
  def band1 = rectangle(50,100,"solid",clr1)
  def band2 = rectangle(50,100,"solid",clr2)
  def band3 = rectangle(50,100,"solid",clr3)
  beside(band1, band2, band3)
  
vertical_triband("blue", "white", "red")
println("")

println("Exercise 15")
fun horizontal_triband(clr1, clr2, clr3):
  def scaled_image = scale_xy(2/3,3/2,vertical_triband(clr1, clr2, clr3))
  rotate(270,scaled_image)

horizontal_triband("darkred", "white", "blue")