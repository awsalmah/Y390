#lang rhombus

import: "../image.rhm" open
        "../universe.rhm" open
        
// 1 Big Bang

// Exercise 1:
fun draw(str):
  overlay(
    text(str,24,"yellow"),
    rectangle(500,250,255,"black"))

fun add_letter(str,k): str ++ k

// Exercise 2: big_bang

/*
big_bang "":
  ~draw: draw 
  ~tick: fun (n): n
  ~key: add_letter
  ~mouse: fun (a,b,c,d): a
*/
                       
// Exercise 3: modify Exercise 2
                       
fun add_letter_no_space(str,k):
  cond
  | to_string(k) == " ": ""
  | ~else: str ++ k

/*
big_bang "":
  ~draw: draw 
  ~tick: fun (n): n
  ~key: add_letter_no_space
  ~mouse: fun (a,b,c,d): a
*/
           
// 2 Structures
           
// Exercise 4: TK

// Exercise 5:
class address(street,apartment,city,zip)

// Exercise 6: TK

// Exercise 7:
fun is_address(a):
  a.zip <= 4900 && a.zip >= 4600

check is_address(address("a","a","b",4600)) ~is #true
check is_address(address("a","a","b",4900)) ~is #true
check is_address(address("a","a","b",900)) ~is #false

// Exercise 8:
fun format_address(a):
  a.street ++ " " ++ a.apartment ++ " " ++ a.city ++ " " ++ to_string(a.zip)

check format_address(address("a","a","b",900)) ~is "a a b 900"

// Exercise 9:
fun smaller_zip(a1,a2):
  if a1.zip <= a2.zip
  | a1
  | a2

// 3 Book exercises
    
// Exercise 83
class editor(pre,post)
def scene = empty_scene(200,20)
def cursor = rectangle(1,20,255,"red")

fun render(ed):
  def content = beside(text(ed.pre,16,"black"),cursor,text(ed.post,16,"black"))
  overlay_align("left","center",content,scene)

render(editor("Hello","World"))

// Exercise 84
// match: no matching case for \b \t \r
//String.copy("a")
// interestingly enough ~key returns String.copy
fun edit(ed, ke):
  cond
  | ke.length() == 1:
      match to_string(ke)
      | "\b" : if ed.pre.length() >= 1
               | editor(ed.pre.substring(..ed.pre.length()-1),ed.post)
               | ed
      | "\t" || "\r" : ed
      | ~else : editor(ed.pre ++ ke,ed.post)
  | ~else: match to_string(ke)
           | "left" : if ed.pre.length() >= 1
                      | editor(ed.pre.substring(..ed.pre.length()-1),ed.pre[ed.pre.length()-1] +& ed.post)
                      | ed
           | "right" :  if ed.post.length() >= 1
                        | editor(ed.pre +& ed.post[0],ed.post.substring(1..))
                        | ed
           | ~else : ed

def y = editor("hello","world")
def ke = "\b"
  
fun run(pre):
  big_bang editor(pre,""):
    ~draw: render
    ~tick: fun(n) : n 
    ~key: edit
    ~mouse: fun (a,b,c,d): a

// run(y.pre)

// 4 Challenge

// need to design the handler functions used by big bang!!

// def a structure labeled editor which contains a line editor, a label and a state.
class labeled_editor(ed :: editor, label :: String, state :: Boolean)
// use the work you have already done
// an address editor should consist of 4 line editors.
// an address form should contain 4 editors.
// new data def for a form should use existing data def for an editor.
// form stucture would contain 4 labelled_editors.
class form(street :: labeled_editor, apartment :: labeled_editor, city :: labeled_editor, zip :: labeled_editor)

// your new drawing function for a form should use existing drawing function for an editor.
//rendering and printing stuff
fun active_render(x):
  //def content = beside(text(x.ed.pre,16,"black"),rectangle(2,20,255,"red"),text(x.ed.post,16,"black"))
  //def field = overlay_align("left","center",content,scene)
  beside(text(x.label,20,"blue"),render(x.ed))

fun inactive_render(x):
  def content = beside(text(x.ed.pre,16,"black"),rectangle(2,20,255,"dark gray"),text(x.ed.post,16,"black"))
  def field = overlay_align("left","center",content,scene)
  beside(text(x.label,20,"blue"),field)

fun render_form_helper(x):
  cond
  | x.street.state == #true :[active_render(x.street),
                              inactive_render(x.apartment),
                              inactive_render(x.city),
                              inactive_render(x.zip)]
  | x.apartment.state == #true :[inactive_render(x.street),
                                 active_render(x.apartment),
                                 inactive_render(x.city),
                                 inactive_render(x.zip)]
  | x.city.state == #true :[inactive_render(x.street),
                            inactive_render(x.apartment),
                            active_render(x.city),
                            inactive_render(x.zip)]
  | x.zip.state == #true :[inactive_render(x.street),
                           inactive_render(x.apartment),
                           inactive_render(x.city),
                           active_render(x.zip)]
  | x.street.state == #false && x.apartment.state == #false && x.city.state == #false && x.zip.state == #false :
      [inactive_render(x.street),
       inactive_render(x.apartment),
       inactive_render(x.city),
       inactive_render(x.zip)]
  | ~else : [active_render(x.street),
             inactive_render(x.apartment),
             inactive_render(x.city),
             inactive_render(x.zip)]

fun render_form(x):
  def ls = render_form_helper(x)
  overlay(
    above_align("right",ls[0],
                text("",5,"white"),ls[1],
                text("",5,"white"),
                ls[2],
                text("",5,"white"),
                ls[3]),
    empty_scene(321,123))

// new key handler function for a form should use your existing key handler function for an editor.
// handling a key for a labeled-editor should use your existing key handler functions for an editor ONLY if the state is active
// design helper functions which update a form to make the next labeled editor active and the rest inactive.
fun next_labeled_editor(x):
  cond
  | x.street.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                   labeled_editor(x.apartment.ed,x.apartment.label,#true),
                                   labeled_editor(x.city.ed,x.city.label,#false),
                                   labeled_editor(x.zip.ed,x.zip.label,#false))
  | x.apartment.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                      labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                      labeled_editor(x.city.ed,x.city.label,#true),
                                      labeled_editor(x.zip.ed,x.zip.label,#false))
  | x.city.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                 labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                 labeled_editor(x.city.ed,x.city.label,#false),
                                 labeled_editor(x.zip.ed,x.zip.label,#true))
  | x.zip.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                labeled_editor(x.city.ed,x.city.label,#false),
                                labeled_editor(x.zip.ed,x.zip.label,#true))
                           
// design helper functions which update a form to make the previous labeled editor active and the rest inactive.
fun prev_labeled_editor(x):
  cond
  | x.street.state == #true : form(labeled_editor(x.street.ed,x.street.label,#true),
                                   labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                   labeled_editor(x.city.ed,x.city.label,#false),
                                   labeled_editor(x.zip.ed,x.zip.label,#false))
  | x.apartment.state == #true : form(labeled_editor(x.street.ed,x.street.label,#true),
                                      labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                      labeled_editor(x.city.ed,x.city.label,#false),
                                      labeled_editor(x.zip.ed,x.zip.label,#false))
  | x.city.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                 labeled_editor(x.apartment.ed,x.apartment.label,#true),
                                 labeled_editor(x.city.ed,x.city.label,#false),
                                 labeled_editor(x.zip.ed,x.zip.label,#false))
  | x.zip.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                labeled_editor(x.city.ed,x.city.label,#true),
                                labeled_editor(x.zip.ed,x.zip.label,#false))

// if a field is active then just call edit on it and add it to the other fields
fun edit_form(x, ke):
  if x.street.state == #false && x.apartment.state == #false && x.city.state == #false && x.zip.state == #false
  | form(labeled_editor(x.street.ed,x.street.label,#false),
         labeled_editor(x.apartment.ed,x.apartment.label,#false),
         labeled_editor(x.city.ed,x.city.label,#false),
         labeled_editor(x.zip.ed,x.zip.label,#false))//error("oops") // editing session should stop
  | match to_string(ke)
    | "\r" : form(labeled_editor(x.street.ed,x.street.label,#false),
                  labeled_editor(x.apartment.ed,x.apartment.label,#false),
                  labeled_editor(x.city.ed,x.city.label,#false),
                  labeled_editor(x.zip.ed,x.zip.label,#false))//error("oops") // editing session should stop
    | "up" : prev_labeled_editor(x) 
    | "down" : next_labeled_editor(x)
    | ~else: cond
             | x.street.state == #true : form(labeled_editor(edit(x.street.ed,ke),x.street.label,#true),
                                              labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                              labeled_editor(x.city.ed,x.city.label,#false),
                                              labeled_editor(x.zip.ed,x.zip.label,#false))
             | x.apartment.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                                 labeled_editor(edit(x.apartment.ed,ke),x.apartment.label,#true),
                                                 labeled_editor(x.city.ed,x.city.label,#false),
                                                 labeled_editor(x.zip.ed,x.zip.label,#false))
             | x.city.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                            labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                            labeled_editor(edit(x.city.ed,ke),x.city.label,#true),
                                            labeled_editor(x.zip.ed,x.zip.label,#false))
             | x.zip.state == #true : form(labeled_editor(x.street.ed,x.street.label,#false),
                                           labeled_editor(x.apartment.ed,x.apartment.label,#false),
                                           labeled_editor(x.city.ed,x.city.label,#false),
                                           labeled_editor(edit(x.zip.ed,ke),x.zip.label,#true))

                                    
  
// fun adrs(adrss):
// takes an address as input,
// launches big bang: to let the user edit the address and outputs the new address when the user is done
fun adrs(addrss):
  big_bang addrss: // takes an address as an inputs
    ~draw: render_form // drawing fun for forms // should be equivalent to render
    ~tick: fun(n) : n 
    ~key: edit_form // create a function equivalent to edit for forms
    ~mouse: fun (a,b,c,d): a


def iub = form(labeled_editor(editor("70","0 Woodlawn"),"Street: ",#true),
               labeled_editor(editor("30","18"),"Apartment: ",#true),
               labeled_editor(editor("Bloomington",""),"City: ",#true),
               labeled_editor(editor("4","7408"),"Zip: ",#true))
render_form(iub)

// adrs(iub)