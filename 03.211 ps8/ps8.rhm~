#lang rhombus

// 211: Turtle graphics

class turn(angle::Number)
class draw(distance::Number)

// Examples of Trips
def square_trip = List[draw(50),turn(90),draw(50),turn(90),draw(50),turn(90),draw(50)]
def z_trip = List[draw(80),turn(-135),draw(120),turn(135),draw(80)]
def trip1 = List[draw(100),turn(90),draw(80)] // shaped like L
def trip2 = List[draw(100),turn(120),draw(50),turn(-90),draw(30)] // shaped like how some people write 4

println("Exercise 1")
println("")

fun step_length(s):
  match s:
  |turn(a): 0
  |draw(d): d

check step_length(draw(100)) ~is 100
check step_length(turn(100)) ~is 0

step_length(draw(100)) // should be 100
step_length(turn(100)) // should be 0
println("")
println("")


println("Exercise 2")

fun trip_length(t:: List):
  match t
  |List(): 0
  |List(a,...): step_length(t.first) + trip_length(t.rest)

check trip_length(z_trip) ~is 280
check trip_length(square_trip) ~is 200
check trip_length(trip1) ~is 180
check trip_length(trip2) ~is 180
check trip_length(List()) ~is 0

trip_length(z_trip) // should be 280
trip_length(square_trip) // should be 200
println("")
println("")


println("Exercise 3")

class turtle(x::Number,y::Number,dir::Number)

def t = turtle(24,25,90)

check t.x ~is 24
check t.y ~is 25
check t.dir ~is 90

t.x
t.y
t.dir
println("")

fun turtle_rad(t :: turtle):
  t.dir * math.pi/180

check turtle_rad(turtle(60,50,270)) ~is (math.pi * 1.5)
check turtle_rad(turtle(60,50,0)) ~is 0

fun move(s,t :: turtle):
  match s:
  | turn(a): t with (dir = a + t.dir)
  | draw(d): t with (x = t.x + d * math.cos(turtle_rad(t)),
                     y = t.y - d * math.sin(turtle_rad(t)))

// check move(draw(100),turtle(60,50,270)) ~is turtle(60,150,270) check this later +/- 0.001
check move(turn(90),turtle(60,50,270)) ~is turtle(60,50,360)

move(draw(100),turtle(60,50,270))
move(turn(90),turtle(60,50,270))

println("")
println("")

println("Exercise 4")
println("")

fun draw_step(s, t:: turtle, i):
  match s:
  |turn(a): i
  |draw(d): 1
// 
println("")
println("")